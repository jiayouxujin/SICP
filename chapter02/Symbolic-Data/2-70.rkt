#lang sicp

(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object)(eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
    (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right)))
)

(define (left-branch tree)
    (car tree)
)
(define (right-branch tree)
    (cadr tree)
)

(define (symbols tree)
    (if (leaf? tree)
        (list (symbol-leaf tree))
        (caddr tree)
    )
)
(define (weight tree)
    (if (leaf? tree)
        (weight-leaf tree)
        (cadddr tree)
    )
)

(define (decode bits tree)
    (define (decode-1 bits current-branch)
        (if (null? bits)
            '()
            (let ((next-branch (choose-branch (car bits) current-branch)))
                (if (leaf? next-branch)
                    (cons (symbol-leaf next-branch) (decode-1 (cdr bits) tree))
                    (decode-1 (cdr bits) next-branch)
                )
            )
        )
    )
    (decode-1 bits tree)
)

(define (choose-branch bit branch)
    (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit: CHOOSE-BRANCH " bit))
    )
)

(define (adjoin-set x set)
    (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))
    )
)

(define (make-leaf-set pairs)
    (if (null? pairs)
        '()
        (let ((pair (car pairs)))
            (adjoin-set (make-leaf (car pair) (cadr pair)) (make-leaf-set (cdr pairs)))
        )
    )
)

(define (encode message tree)
    (if (null? message)
        '()
        (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))
    )
)

(define (encode-symbol symbol tree)
    (if (leaf? tree)
        '()
        (let((left (left-branch tree))
            (right (right-branch tree)))
            (cond ((in? symbol left) (cons '0 (encode-symbol symbol left)))
                ((in? symbol right) (cons '1 (encode-symbol symbol right)))
                (else (error "the symbol is not in the tree " symbol))
            )
        )
    )
)

(define (in? symbol branch)
    (define (in symbol branch-symbols)
        (if (null? branch-symbols)
            false
            (if (equal? symbol (car branch-symbols))
                true
                (in symbol (cdr branch-symbols))
            )
        )
    )
    (in symbol (symbols branch))
)

(define (generate-huffman-tree pairs)
    (successive-merge (make-leaf-set pairs))
)

(define (successive-merge ordered-set)
    (cond ((= 0 (length ordered-set))
            '())
          ((= 1 (length ordered-set))
            (car ordered-set))
          (else
            (let ((new-sub-tree (make-code-tree (car ordered-set)
                                                (cadr ordered-set)))
                  (remained-ordered-set (cddr ordered-set)))
                (successive-merge (adjoin-set new-sub-tree remained-ordered-set))))))

(define huff
  (generate-huffman-tree 
    '((BOOM 1) (WAH 1) (A 2) (GET 2) (JOB 2) (SHA 3) (YIP 9) (NA 16))))

(encode '(GET A JOB) huff)